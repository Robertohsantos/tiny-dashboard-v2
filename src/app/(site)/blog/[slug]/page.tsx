import type { Metadata } from 'next/types'
import { api } from '@/igniter.client'
import { notFound } from 'next/navigation'
import { generateMetadata as baseGenerateMetadata } from '@/modules/site'
import { BlogPostArticle } from '@/@saas-boilerplate/features/blog/presentation/components'
import { ArticleJsonLd, createArticleSchema } from '@/modules/core/seo/article'
import {
  OrganizationJsonLd,
  createOrganizationSchema,
} from '@/modules/core/seo/organization'
import { AppConfig } from '@/config/boilerplate.config.client'

// Configure dynamic behavior
export const dynamic = 'force-dynamic'
export const dynamicParams = true // Allow dynamic params that aren't generated by generateStaticParams

interface PageProps {
  params: Promise<{ slug: string }>
}

export async function generateMetadata({
  params,
}: PageProps): Promise<Metadata> {
  const { slug } = await params

  const response = await api.blog.getPost.query({
    params: {
      slug,
    },
  })

  if (!response?.data?.post) {
    return baseGenerateMetadata({
      title: 'Post Not Found',
      description: 'The blog article you are looking for could not be found.',
      path: `/blog/${slug}`,
      noIndex: true,
    })
  }

  const post = response.data.post
  const postTitle = post.data.title || 'Blog Article'
  const postExcerpt = post.excerpt || ''
  const postCover = post.data.cover || ''

  return baseGenerateMetadata({
    title: postTitle,
    description: postExcerpt || `Read more about ${postTitle}`,
    path: `/blog/${slug}`,
    ogImage: postCover,
    keywords: ['Blog Article', postTitle, 'SaaS Blog', 'Business Insights'],
  })
}

export default async function Page({ params }: PageProps) {
  const { slug } = await params

  const response = await api.blog.getPost.query({
    params: {
      slug,
    },
  })

  if (!response?.data) return notFound()

  const { post, related } = response.data

  // Create article structured data
  const articleData = createArticleSchema({
    headline: post.data.title || 'Blog Article',
    description: post.excerpt || '',
    datePublished: post.data.date || new Date().toISOString(),
    author: {
      name: post.data.author || 'Anonymous',
    },
    publisher: {
      name: AppConfig.name,
      url: AppConfig.url,
      logo: AppConfig.brand.logo.light,
    },
    url: `/blog/${slug}`,
    section: 'Blog',
    keywords: post.data.tags || [],
  })

  // Create organization structured data
  const organizationData = createOrganizationSchema({
    name: AppConfig.name,
    url: AppConfig.url,
    logo: AppConfig.brand.logo.light,
    description: AppConfig.description,
    sameAs: [
      AppConfig.links.twitter,
      AppConfig.links.linkedin,
      AppConfig.links.facebook,
      AppConfig.links.instagram,
    ].filter(Boolean),
    email: AppConfig.links.mail,
  })

  return (
    <>
      {/* SEO Structured Data */}
      <ArticleJsonLd article={articleData} />
      <OrganizationJsonLd organization={organizationData} />

      <BlogPostArticle
        slug={slug}
        post={{
          title: post.data.title,
          date: post.data.date,
          tags: post.data.tags,
          author: post.data.author || 'Anonymous',
          authorImage: post.data.authorImage,
          cover: post.data.cover,
          excerpt: post.excerpt,
          content: post.content,
          id: post.id,
          slug: post.slug,
          headings: post.headings,
        }}
        related={related.map((post) => ({
          title: post.data.title,
          date: post.data.date,
          tags: post.data.tags,
          author: post.data.author || 'Anonymous',
          authorImage: post.data.authorImage,
          cover: post.data.cover,
          excerpt: post.excerpt,
          content: post.content,
          id: post.id,
          slug: post.slug,
          headings: post.headings,
        }))}
      />
    </>
  )
}
